// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  department Department?
  notifications Notification[]
}

enum Role {
  super_admin
  rd_department
  other_department
}

model Department {
  id        String   @id @default(uuid())
  name      String
  code      String   @unique
  head      String
  contact   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  // Add relations for incoming and notifications
  incomingLetters Incoming[] @relation("DepartmentIncoming")
  outgoingLetters Outgoing[] @relation("DepartmentOutgoing")
  notifications Notification[]
}

model Courier {
  id            String   @id @default(uuid())
  serviceName   String
  code          String   @unique
  contactPerson String
  email         String
  phone         String
  address       String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum IncomingStatus {
  RECEIVED
  TRANSFERRED
  COLLECTED
  ARCHIVED
}

enum OutgoingStatus {
  PENDING_DISPATCH
  DISPATCHED
  DELIVERED
  RETURNED
}

model Incoming {
  id            String         @id @default(uuid())
  image         String?        // URL or path to uploaded image
  from          String
  to            String         // department id (relation below)
  priority      String
  subject       String?
  description   String?
  filing        String?
  qrCode        String         @unique
  status        IncomingStatus @default(RECEIVED)
  createdAt     DateTime       @default(now())
  receivedDate  DateTime       @default(now())
  department    Department     @relation("DepartmentIncoming", fields: [to], references: [id])
  notifications Notification[]
}

model Outgoing {
  id            String         @id @default(uuid())
  image         String?        // URL or path to uploaded image
  from          String         // department id (relation below)
  to            String
  priority      String
  subject       String?
  qrCode        String         @unique
  status        OutgoingStatus @default(PENDING_DISPATCH)
  createdAt     DateTime       @default(now())
  dispatchedDate DateTime?
  deliveredDate DateTime?
  department    Department     @relation("DepartmentOutgoing", fields: [from], references: [id])
  notifications Notification[]
}

model Notification {
  id          String   @id @default(uuid())
  message     String
  incomingId  String?
  incoming    Incoming? @relation(fields: [incomingId], references: [id])
  outgoingId  String?
  outgoing    Outgoing? @relation(fields: [outgoingId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}
